import { Path } from './path';
import { Node } from './node';
import { CityData, Point2D, MatrixTile, CityGenerationParametersCustom } from './types';
import { Building } from './building';
export declare class City {
    readonly width: number;
    readonly height: number;
    private seed;
    private matrix;
    private nodes;
    private gauge;
    private params;
    constructor({ width, height }: CityData);
    getMatrix(): MatrixTile[][];
    getSeed(): number[] | null;
    getAllBuildings(): Building[];
    getBuildingAt(position: Point2D): Building | null;
    getAllNodes(): Node[];
    getNodeAt(position: Point2D): Node | null;
    getAllPaths(): Path[];
    getPathAt(position: Point2D): Path | null;
    markAt(position: Point2D, tile: MatrixTile): void;
    getAt(position: Point2D): MatrixTile;
    isEmptyAt(position: Point2D): boolean;
    each(callback: (position: Point2D, tile: MatrixTile) => boolean | void): void;
    reset(): void;
    generate(params?: CityGenerationParametersCustom): Promise<void>;
    private generatePaths;
    private processingPath;
    private generateBuildings;
    private processingBuilding;
    private addNode;
    private closePath;
    private forkPath;
    private turnPath;
    private splitPath;
    private getCross;
    private filterDirections;
    private variability;
}
